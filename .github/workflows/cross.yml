# Copyright (c) the JPEG XL Project Authors. All rights reserved.
#
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Workflow for building and running tests.

name: Cross-compiling builds
on:
  push:
    branches:
      - main
      - v*.*.x
      - cross
  pull_request:
    types: [opened, reopened, labeled, synchronize]

jobs:
  cross_compile_ubuntu:
    name: Cross-compiling ${{ matrix.build_target }}
    runs-on: [ubuntu-latest]
    strategy:
      fail-fast: false
      matrix:
        include:
          # - arch: arm64
          #   build_target: aarch64-linux-gnu
          #   cmake_args: -DCMAKE_CROSSCOMPILING_EMULATOR=/usr/bin/qemu-aarch64-static

          # - arch: armhf
          #   build_target: arm-linux-gnueabihf
          #   cmake_args: -DCMAKE_CROSSCOMPILING_EMULATOR=/usr/bin/qemu-arm-static

          - arch: i386
            build_target: i686-linux-gnu

    env:
      BUILD_DIR: build

    steps:
    - name: Setup apt
      shell: bash
      run: |
        set -x
        sudo apt-get update -y
        sudo apt-get install -y curl gnupg ca-certificates
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 1E9377A2BA9EF27F

        if [[ "${{ matrix.arch }}" != "amd64" ]]; then
          sudo dpkg --add-architecture "${{ matrix.arch }}"

          # Update the sources.list with the split of supported architectures.
          bkplist="/etc/apt/sources.list.bkp"
          sudo mv /etc/apt/sources.list "${bkplist}"

          newlist="/etc/apt/sources.list"
          sudo rm -f "${newlist}"

          main_list="amd64"
          port_list=""
          if [[ "${{ matrix.arch }}" == "i386" ]]; then
            main_list="amd64,i386"
          else
            port_list="${{ matrix.arch }}"
          fi

          if [[ -n "${port_list}" ]]; then
            port_url="http://ports.ubuntu.com/ubuntu-ports/"
            grep -v -E '^#' "${bkplist}" |
              sed -E "s;^deb (http[^ ]+) (.*)\$;deb [arch=${{ matrix.arch }}] ${port_url} \\2;" \
              | sudo tee -a "${newlist}"
          fi
          grep -v -E '^#' "${bkplist}" |
            sed -E "s;^deb (http[^ ]+) (.*)\$;deb [arch=${main_list}] \\1 \\2\ndeb-src [arch=${main_list}] \\1 \\2;" \
            | sudo tee -a "${newlist}"
        fi

    - name: Install build deps
      shell: bash
      run: |
        set -x
        sudo apt update
        pkgs=(
          # Build dependencies
          ccache
          cmake
          doxygen
          libgtest-dev:${{ matrix.arch }}
          ninja-build
          pkg-config
          qemu-user-static
          xvfb

          # Toolchain for cross-compiling.
          clang-7
          # libclang-common-7-dev:${{ matrix.arch }}
          libc6-dev-${{ matrix.arch }}-cross
          libstdc++-9-dev-${{ matrix.arch }}-cross
          libstdc++-9-dev:${{ matrix.arch }}

          # Dependencies
          libbrotli-dev:${{ matrix.arch }}
          libgif-dev:${{ matrix.arch }}
          libjpeg-dev:${{ matrix.arch }}
          libpng-dev:${{ matrix.arch }}
          libwebp-dev:${{ matrix.arch }}

          # For OpenEXR:
          libilmbase-dev:${{ matrix.arch }}
          libopenexr-dev:${{ matrix.arch }}

          # GTK plugins
          libgdk-pixbuf2.0-dev
          libgtk2.0-dev

          # QT
          libqt5x11extras5-dev:${{ matrix.arch }}
          qtbase5-dev:${{ matrix.arch }}
        )
        if [[ "${{ matrix.build_target }}" != "x86_64-linux-gnu" ]]; then
          pkgs+=(
            binutils-${{ matrix.build_target }}
            gcc-${{ matrix.build_target }}
          )
        fi
        if [[ "${{ matrix.arch }}" != "i386" ]]; then
          pkgs+=(
            # TCMalloc
            libgoogle-perftools-dev:${{ matrix.arch }}
            libgoogle-perftools4:${{ matrix.arch }}
            libtcmalloc-minimal4:${{ matrix.arch }}
            libunwind-dev:${{ matrix.arch }}
          )
        fi
        DEBIAN_FRONTEND=noninteractive sudo apt install -y "${pkgs[@]}" \
          ${{ matrix.apt_pkgs }}
        echo "CC=clang-7" >> $GITHUB_ENV
        echo "CXX=clang++-7" >> $GITHUB_ENV
    - name: Checkout the source
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 1
    - name: Build
      run: |
        mode="release"
        [[ -n "${mode}" ]] || mode="${{ matrix.name }}"
        ./ci.sh ${mode} \
          -DJPEGXL_FORCE_SYSTEM_BROTLI=ON \
          -DJPEGXL_ENABLE_JNI=OFF \
          ${{ matrix.cmake_args }}
      env:
        SKIP_TEST: 1
        CMAKE_CXX_FLAGS: ${{ matrix.cxxflags }}
        BUILD_TARGET: ${{ matrix.build_target }}
    - name: Build stats ${{ matrix.name }}
      run: |
        tools/build_stats.py --save build/stats.json \
          --binutils ${{ matrix.build_target }}- \
          --max-stack ${{ matrix.max_stack || '0' }} \
          cjxl djxl libjxl.so libjxl_dec.so
    # Run the tests on push and when requested in pull_request.
    - name: Test
      # Some tests have a small floating point error on i686.
      # TODO(deymo): Re-enable i686 tests.
      if: ${{ matrix.build_target != 'i686-linux-gnu' }}
      run: |
        ./ci.sh test
      env:
        BUILD_TARGET: ${{ matrix.build_target }}
